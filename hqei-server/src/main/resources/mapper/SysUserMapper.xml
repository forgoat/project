<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hqei.server.dao.SysUserDao" >
  <resultMap id="BaseResultMap" type="com.hqei.server.domain.SysUserDo" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="role_id" property="roleId" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="BIGINT" />
    <result column="update_time" property="updateTime" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, username, password, nickname, role_id, create_time, update_time, status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from sys_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectByNameAndPwd"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from sys_user
    where username = #{loginName,jdbcType=VARCHAR} and password = #{password, jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from sys_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.hqei.server.domain.SysUserDo" useGeneratedKeys="true" keyProperty="id">
    insert into sys_user (id, username, password, 
      nickname, role_id, create_time, 
      update_time, status)
    values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{nickname,jdbcType=VARCHAR}, #{roleId,jdbcType=BIGINT}, #{createTime,jdbcType=BIGINT}, 
      #{updateTime,jdbcType=BIGINT}, #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.hqei.server.domain.SysUserDo" >
    insert into sys_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="nickname != null" >
        nickname,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        #{roleId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.hqei.server.domain.SysUserDo" >
    update sys_user
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=BIGINT},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hqei.server.domain.SysUserDo" >
    update sys_user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      nickname = #{nickname,jdbcType=VARCHAR},
      role_id = #{roleId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=BIGINT},
      update_time = #{updateTime,jdbcType=BIGINT},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="countUser" resultType="Integer">
    SELECT count(0)
    FROM sys_user u
    WHERE u.status = 1
  </select>
  <resultMap id="userMap" type="com.hqei.server.vo.SysUserVo">
    <id column="userId" property="userId"/>
    <result column="username" property="username"/>
    <result column="nickname" property="nickname"/>
    <result column="roleId" property="roleId"/>
    <result column="roleName" property="roleName"/>
    <result column="createTime" property="createTime"/>
    <result column="updateTime" property="updateTime"/>
    <result column="status" property="status"/>
    <collection property="permissionList" ofType="String">
      <id column="permissionName" property="permissionName"/>
    </collection>
  </resultMap>
  <select id="listUser" resultMap="userMap">
    SELECT
    u.*,
    r.role_name                            roleName,
    CONCAT(p.menu_name, p.permission_name) permissionName
    FROM (
    SELECT
    id                                      userId,
    username                                username,
    nickname                                nickname,
    role_id                                 roleId,
    status                                  status,
    create_time createTime,
    update_time updateTime
    FROM sys_user
    WHERE status = 1
    ORDER BY id
    LIMIT #{offSet}, #{pageRow}
    ) u
    LEFT JOIN sys_role r ON r.id = u.roleId
    LEFT JOIN sys_role_permission rp ON rp.role_id = r.id
    LEFT JOIN sys_permission p ON p.id = rp.permission_id
    ORDER BY u.userId
  </select>

  <select id="getAllRoles" resultType="com.alibaba.fastjson.JSONObject">
    SELECT
    id        roleId,
    role_name roleName
    FROM sys_role
    WHERE status=1
  </select>

  <update id="updateUser" parameterType="com.hqei.server.request.ModifyUserReq">
    UPDATE sys_user
    SET
    nickname = #{nickname}
    <if test="password !='' and password !=null">
      , password = #{password}
    </if>
    , role_id = #{roleId}
    , status = #{status}
    WHERE id = #{userId} and id != 10001
  </update>
  <!--<resultMap id="roleMap" type="com.heeexy.example.util.model.One2Many">-->
    <!--<id column="roleId" property="roleId"/>-->
    <!--<result column="roleName" property="roleName"/>-->
    <!--<collection property="users" ofType="com.alibaba.fastjson.JSONObject">-->
      <!--<id column="userId" property="userId"/>-->
      <!--<result column="nickname" property="nickname"/>-->
    <!--</collection>-->
    <!--<collection property="menus" ofType="com.heeexy.example.util.model.One2Many">-->
      <!--<id column="menuCode" property="menuCode"/>-->
      <!--<result column="menuName" property="menuName"/>-->
      <!--<collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">-->
        <!--<id column="permissionId" property="permissionId"/>-->
        <!--<result column="permissionName" property="permissionName"/>-->
      <!--</collection>-->
    <!--</collection>-->
  <!--</resultMap>-->
  <!--<select id="listRole" resultMap="roleMap">-->
    <!--SELECT-->
    <!--r.id              roleId,-->
    <!--r.role_name       roleName,-->
    <!--u.id              userId,-->
    <!--u.nickname        nickname,-->
    <!--p.id              permissionId,-->
    <!--p.menu_code       menuCode,-->
    <!--p.menu_name       menuName,-->
    <!--p.permission_name permissionName-->
    <!--FROM sys_role r-->
    <!--LEFT JOIN sys_user u ON r.id = u.role_id AND u.status =1-->
    <!--LEFT JOIN sys_role_permission rp ON r.id = rp.role_id AND rp.status = 1-->
    <!--LEFT JOIN sys_permission p ON rp.permission_id = p.id-->
    <!--WHERE r.status = 1-->
    <!--ORDER BY r.id, p.id-->
  <!--</select>-->
  <!--<resultMap id="permissionMap" type="com.heeexy.example.util.model.One2Many">-->
    <!--<id column="menuName" property="menuName"/>-->
    <!--<collection property="permissions" ofType="com.alibaba.fastjson.JSONObject">-->
      <!--<id column="id" property="id"/>-->
      <!--<result column="permissionName" property="permissionName"/>-->
      <!--<result column="requiredPerm" property="requiredPerm" javaType="Integer"/>-->
    <!--</collection>-->
  <!--</resultMap>-->
  <!--<select id="listAllPermission" resultMap="permissionMap">-->
    <!--SELECT-->
    <!--p.id                  id,-->
    <!--p.menu_name           menuName,-->
    <!--p.permission_name     permissionName,-->
    <!--p.required_permission requiredPerm-->
    <!--FROM sys_permission p;-->
  <!--</select>-->

  <insert id="insertRole" useGeneratedKeys="true" keyProperty="roleId">
    INSERT INTO sys_role
    (role_name)
    VALUES (#{roleName})
  </insert>

  <insert id="insertRolePermission">
    insert into sys_role_permission (role_id, permission_id)
    values
    <foreach collection="permissions" item="item" index="index" separator=",">
      (#{roleId}, #{item})
    </foreach>
  </insert>

  <!--<resultMap id="aRole" type="com.heeexy.example.util.model.One2Many">-->
    <!--<id column="roleId" property="roleId"/>-->
    <!--<result column="roleName" property="roleName"/>-->
    <!--<collection property="users" ofType="com.alibaba.fastjson.JSONObject">-->
      <!--<id column="userId" property="userId"/>-->
    <!--</collection>-->
    <!--<collection property="permissionIds" ofType="Integer">-->
      <!--<id column="permissionId" property="permissionId"/>-->
    <!--</collection>-->
  <!--</resultMap>-->
  <!--<select id="getRoleAllInfo" resultMap="aRole">-->
    <!--SELECT-->
    <!--r.id        roleId,-->
    <!--r.role_name roleName,-->
    <!--u.id        userId,-->
    <!--p.id        permissionId-->
    <!--FROM sys_role r-->
    <!--LEFT JOIN sys_user u ON r.id = u.role_id AND u.status = 1-->
    <!--LEFT JOIN sys_role_permission rp ON r.id = rp.role_id AND rp.status = 1-->
    <!--LEFT JOIN sys_permission p ON rp.permission_id = p.id-->
    <!--WHERE r.id = #{roleId}-->
  <!--</select>-->

  <update id="removeRole">
    UPDATE sys_role
    SET
    status = 2
    WHERE id = #{roleId} and id !=1
  </update>
  <update id="removeRoleAllPermission">
    UPDATE sys_role_permission
    SET
    status = 2
    WHERE role_id = #{roleId}
  </update>

  <update id="removeOldPermission">
    UPDATE sys_role_permission
    SET
    status = 2
    WHERE role_id = #{roleId}
    AND permission_id in (
    <foreach collection="permissions" item="item" index="index" separator=",">
      #{item}
    </foreach>
    )
  </update>
  <update id="updateRoleName">
    UPDATE sys_role
    SET
    role_name = #{roleName}
    WHERE id = #{roleId}
  </update>
  <select id="queryExistUsername" resultType="int">
    select count(0)
    from sys_user
    WHERE username=#{username}
    AND status=1
  </select>
</mapper>